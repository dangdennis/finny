//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub password_hash: Option<String>,
    #[sea_orm(unique)]
    pub apple_sub: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(has_many = "super::assets::Entity")]
    Assets,
    #[sea_orm(has_many = "super::goals::Entity")]
    Goals,
    #[sea_orm(has_many = "super::plaid_api_events::Entity")]
    PlaidApiEvents,
    #[sea_orm(has_many = "super::plaid_items::Entity")]
    PlaidItems,
    #[sea_orm(has_many = "super::plaid_link_events::Entity")]
    PlaidLinkEvents,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::assets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Assets.def()
    }
}

impl Related<super::goals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Goals.def()
    }
}

impl Related<super::plaid_api_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaidApiEvents.def()
    }
}

impl Related<super::plaid_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaidItems.def()
    }
}

impl Related<super::plaid_link_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaidLinkEvents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
